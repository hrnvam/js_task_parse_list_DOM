{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CC6BA,I,EAAM,EAAW,SAAC,CAAlB,EACE,IAAM,EAAK,SAAS,aAAa,CAAC,MAIlC,OAFA,EAAG,WAAW,CAAG,EAEV,CACT,GAyBA,AAvBA,SAA4B,CAAc,EACxC,IAAM,EAAO,SAAS,aAAa,CAAC,KAEpC,CAAA,EAAK,SAAS,CAAG,GAEZ,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAmB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAnB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmC,CAAnC,IAAM,EAAN,EAAA,KAAA,CACG,EAAK,EAAS,EAAU,IAAI,EAElC,EAAG,YAAY,CACb,cACC,IAA4C,MAAA,CAAzC,EAAU,MAAM,CAAC,cAAc,CAAC,WAEtC,EAAG,YAAY,CAAC,gBAAiB,EAAU,QAAQ,EACnD,EAAG,YAAY,CAAC,WAAY,EAAU,GAAG,EAEzC,EAAK,MAAM,CAAC,EACd,C,C,M,E,CAXK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAYP,EA9BS,AAnBkB,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFO,SAAS,gBAAgB,CAAC,mB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEb,GAAG,CAAC,SAAC,CAAlD,EAKE,IAAM,EAAe,WAJA,EAClB,YAAY,CAAC,eACb,OAAO,CAAC,IAAK,IACb,OAAO,CAAC,IAAK,KAGhB,MAAO,CACL,KAAM,EAAS,WAAW,CAC1B,SAAU,EAAS,YAAY,CAAC,iBAChC,OAAQ,EACR,IAAK,SAAS,EAAS,YAAY,CAAC,YAAa,GACnD,CACF,GAMsB,IAAI,CACxB,SAAC,CAAA,CAAW,CADd,EAC4B,OAAA,EAAU,MAAM,CAAG,EAAU,MAAM,A","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction getArrayOfEmployees() {\n    var listOfEmployeesHTML = _to_consumable_array(document.querySelectorAll(\"[data-salary]\"));\n    var arrayOfEmployees = listOfEmployeesHTML.map(function(employee) {\n        var salaryString = employee.getAttribute(\"data-salary\").replace(\"$\", \"\").replace(\",\", \"\");\n        var salaryNumber = parseFloat(salaryString);\n        return {\n            name: employee.textContent,\n            position: employee.getAttribute(\"data-position\"),\n            salary: salaryNumber,\n            age: parseInt(employee.getAttribute(\"data-age\"), 10)\n        };\n    });\n    return arrayOfEmployees;\n}\nfunction sortEmployeesBySalary(employeesArray) {\n    return employeesArray.sort(function(employee1, employee2) {\n        return employee2.salary - employee1.salary;\n    });\n}\nvar ListItem = function(text) {\n    var li = document.createElement(\"li\");\n    li.textContent = text;\n    return li;\n};\nfunction updateEmployeeList(employeesArray) {\n    var list = document.querySelector(\"ul\");\n    list.innerHTML = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = employeesArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var employeer = _step.value;\n            var li = ListItem(employeer.name);\n            li.setAttribute(\"data-salary\", \"$\".concat(employeer.salary.toLocaleString(\"en-US\")));\n            li.setAttribute(\"data-position\", employeer.position);\n            li.setAttribute(\"data-age\", employeer.age);\n            list.append(li);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nvar employees = getArrayOfEmployees();\nvar sortedEmployees = sortEmployeesBySalary(employees);\nupdateEmployeeList(sortedEmployees);\n\n//# sourceMappingURL=index.96c35218.js.map\n","'use strict';\n\nfunction getArrayOfEmployees() {\n  const listOfEmployeesHTML = [...document.querySelectorAll('[data-salary]')];\n\n  const arrayOfEmployees = listOfEmployeesHTML.map((employee) => {\n    const salaryString = employee\n      .getAttribute('data-salary')\n      .replace('$', '')\n      .replace(',', '');\n    const salaryNumber = parseFloat(salaryString);\n\n    return {\n      name: employee.textContent,\n      position: employee.getAttribute('data-position'),\n      salary: salaryNumber,\n      age: parseInt(employee.getAttribute('data-age'), 10),\n    };\n  });\n\n  return arrayOfEmployees;\n}\n\nfunction sortEmployeesBySalary(employeesArray) {\n  return employeesArray.sort(\n    (employee1, employee2) => employee2.salary - employee1.salary,\n  );\n}\n\nconst ListItem = (text) => {\n  const li = document.createElement('li');\n\n  li.textContent = text;\n\n  return li;\n};\n\nfunction updateEmployeeList(employeesArray) {\n  const list = document.querySelector('ul');\n\n  list.innerHTML = '';\n\n  for (const employeer of employeesArray) {\n    const li = ListItem(employeer.name);\n\n    li.setAttribute(\n      'data-salary',\n      `$${employeer.salary.toLocaleString('en-US')}`,\n    );\n    li.setAttribute('data-position', employeer.position);\n    li.setAttribute('data-age', employeer.age);\n\n    list.append(li);\n  }\n}\n\nconst employees = getArrayOfEmployees();\n\nconst sortedEmployees = sortEmployeesBySalary(employees);\n\nupdateEmployeeList(sortedEmployees);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","ListItem","text","li","document","createElement","textContent","updateEmployeeList","employeesArray","list","querySelector","innerHTML","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","employeer","value","name","setAttribute","concat","salary","toLocaleString","position","age","append","err","return","listOfEmployeesHTML","_array_without_holes","isArray","querySelectorAll","_iterable_to_array","iter","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","test","_non_iterable_spread","TypeError","map","employee","salaryNumber","parseFloat","getAttribute","replace","parseInt","sort","employee1","employee2"],"version":3,"file":"index.96c35218.js.map"}